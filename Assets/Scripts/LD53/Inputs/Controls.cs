//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LD53.Inputs
{
    public partial class @Controls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Placement"",
            ""id"": ""a078133d-d16b-468c-801a-cb06bec67d7e"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""3d29c1a9-fd92-434c-8ecc-b0b8866f0f32"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""ebdb7c8b-9319-4003-a7b2-ac9c9e5b020d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Remove"",
                    ""type"": ""Button"",
                    ""id"": ""142e8cb4-ed0b-4ea8-848d-30ec2414df30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be45eee4-577e-4f41-a9c1-9774a140e0db"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8efaf0ac-6101-46dc-8cf8-d7cfd2bedcf3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee597f8e-d5f3-4025-94d9-676774ecc7c4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Remove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Placement
            m_Placement = asset.FindActionMap("Placement", throwIfNotFound: true);
            m_Placement_Aim = m_Placement.FindAction("Aim", throwIfNotFound: true);
            m_Placement_Interact = m_Placement.FindAction("Interact", throwIfNotFound: true);
            m_Placement_Remove = m_Placement.FindAction("Remove", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Placement
        private readonly InputActionMap m_Placement;
        private List<IPlacementActions> m_PlacementActionsCallbackInterfaces = new List<IPlacementActions>();
        private readonly InputAction m_Placement_Aim;
        private readonly InputAction m_Placement_Interact;
        private readonly InputAction m_Placement_Remove;
        public struct PlacementActions
        {
            private @Controls m_Wrapper;
            public PlacementActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Aim => m_Wrapper.m_Placement_Aim;
            public InputAction @Interact => m_Wrapper.m_Placement_Interact;
            public InputAction @Remove => m_Wrapper.m_Placement_Remove;
            public InputActionMap Get() { return m_Wrapper.m_Placement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlacementActions set) { return set.Get(); }
            public void AddCallbacks(IPlacementActions instance)
            {
                if (instance == null || m_Wrapper.m_PlacementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlacementActionsCallbackInterfaces.Add(instance);
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Remove.started += instance.OnRemove;
                @Remove.performed += instance.OnRemove;
                @Remove.canceled += instance.OnRemove;
            }

            private void UnregisterCallbacks(IPlacementActions instance)
            {
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Remove.started -= instance.OnRemove;
                @Remove.performed -= instance.OnRemove;
                @Remove.canceled -= instance.OnRemove;
            }

            public void RemoveCallbacks(IPlacementActions instance)
            {
                if (m_Wrapper.m_PlacementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlacementActions instance)
            {
                foreach (var item in m_Wrapper.m_PlacementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlacementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlacementActions @Placement => new PlacementActions(this);
        public interface IPlacementActions
        {
            void OnAim(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnRemove(InputAction.CallbackContext context);
        }
    }
}
